그래프란? --> 시험에 잘 나옴
노드 사이의 관계를 줄을 그려주면 그래프이다?
수학적 관점 vertices(버텍스?) 

vertices의 집합 and node의 집합으로 이루어짐
둘의 관계 = edge
방향성이 있음 == directed
방향성이 없음 == undirected 이때 (B A) 와 (A B)는 같음

---------------------
7page (시험에 안나옴)
adjacent node   : 인접한 노드
path            : 버택스를 순차적인 시퀀스를 path라고 부름
complete graph  : 모든 vertex가 모든 vertex에게 연결이 되어있음
---------------------
ifndef complete graph라고 하자
graph의 시간 복잡도
graph가 선을 긋는 수는 n(n-1)
O(n^2)
ifndef incomplete graph라고 해도
graph의 시간 복잡도
graph가 선을 긋는 수는 n(n-1)/2
O(n^2)


graph implementation

adjacent list : Array-base implementation
= 하나의 버텍스가 연결이 가능한 다른 vertex가 수가 무한함

= 1차원 배열은 vertex를 표현하기 위해 사용됨 -> 알맞은 값을 찾기 위해서는 liner search 밖에 방법이 없음
= 2차원 배열은 edge를 표현하기 위해서 사용됨

= 모든 연결이 이어져있을 때 사용하는 것이 효과적이며, 빈 공간이 많을 수록 비효율적인 방식이 됨

----- 이건 구현하지 않음 ------
adjacent list : linked-list implementation

= 버텍스의 표현을 위해서는 1차원 배열을 사용함
= edge의 값을 가지기 위해서는 이를 연결리스트로 구현함
-----------------------------

adjacent matrix:
메모리 사용량 O(|V| + |E|) = O(|V|**2)


adjacent list 
메모리 사용량 O(|V| + |E|) = O(|V|)



------------------------------------
20page:
Problem : 두 그래프 노드 간의 연결 찾기

Method : 
Depth-First-Search : 깊이 우선 탐색 -> 무조건 아래로 내려감
-> 최근에 들어간 것이 먼저 나오게 됨 [FIFO구조]
-> 다 넣고 들어간 것이 아니라면, 자신과 관련된 버텍스를 넣어버림
-> loop 구조가 발생할 수도 있다 / 때문에 마크를 해두어야 한다.

Breadth-First-Search : 폭 우선 탐색 -> 아래로 내려가기보단 같은 가중치의 위치의 옆의 값을 먼저 탐색함
-> queue 구조로 구현함 FIFO구조


------------------------------------

-- 시험에 나오지 않음 --
single-source shortest-path
-- 어떻게 움직이여야 가장 작은 가중치 값이냐?
-- 시험에 나오지 않음 --

------------------------------------

38page부터 시작되는 집합의 개념에 대해서 잘 알아두기

Base Type: the type of the item in the shortest
cardinality : the number of item in a shortest
cardinality(집합의 원소의 개수)


비트 연산자
합집합 c = A|B
공집합 d = A&B
이거 관련해서 참고 사이트
https://aerocode.net/275


값을 살리거나 지우고 싶을 때 사용하는 비트연산은 and이다.
and 연산을 진행하고, 살리고 싶은 것은 1을 주고 나머지는 0을 연산한다.

값을 추가해서 바꾸고 싶을 때 사용하는 비트연산은 or이다.
or 연산을 진행하고, 올리고 싶은 것은 1을 주고 나머지는 0을 연산한다.