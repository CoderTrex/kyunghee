14page:
좋은 해쉬 function : 빨라야함 

아래 사진 obj파일의 모습
vt = 어디에 붙어야 하는지?
vp = 방향 :빛계산 

15page:
sceneness texture : 반복된다는 느낌을 별로 받지 않을 수 있음


24 page :
잠시 멈춘 뒤 모든 것을 로딩을 하고, 플레이를 시작함 
    -> 게임의 업데이트가 많으면 좋은 방식
vs
계속해서 실행할 때 조건을 넣어서 조금씩 로딩함. 

8. 리소스와 파일 시스템 (part.6)


힙 베이스 자원 할당

- 힙은 트리 베이스 구조이다.

스텍 베이스 자원 할당
-포인터를 옮겨서 확인 , 몇개를 살리기 힘듬, 해결책 더블 스텍(양옆으로 오는 구조)


풀 베이스 자원 할당

데이터가 모두 같은 크기로 짤려야함
한번 올라가고 내려올일이 없는 데이터에 대해서

resource chunk allocater 데이터가 계속해서 사용되면서, 짤리는데 이 공간을 잘 사용해주는 alloctater

a가 사용하고 남은 공간을 b에 할당하면 a공간이 삭제 될때 b도 지워지기 때문에
해결첵 : a와 b의 관계가 종속적인 데이터만 사용한다.


integrity : 무결성


11 page :

단순히 address를 통해서 가져오는 것보다 유니크 아이디를 통해서 가져오면 확인하기 쉽고 좀 더 직관적임


13 page:
ready form 후처리 없이 가져와서 처리가능

3d modeling : 다시 후처리 하는 과정이 필요함 / post-load initialization 이 필요함

충돌 처리를 위해서 r값을 가지는 구가 필요하다면, r값만으로도 계산해주는 것이 post load initialization이다.
하지만 이것이 완전한 구로 제공하는지 cube로 제공할 수도 있다.



cpu와 gpu는 서로 메모리의 공유가 안된다.

21 page:

자료형을 선정할때 따로 cpu는 예측하면서 계산하기 
때문에 이러한 예측의 위치에 대해서 branch가 생긴다.

이러한 예측을 100%로 만드는 코딩을 branchless coding이라고 한다.


22 page:

control unit이 작음 -> cpu가 주는 문제만 해결하면됨
연산 속도만 채우면 됨
